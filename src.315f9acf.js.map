{"version":3,"sources":["ab_testing/api/analytics.js","ab_testing/constants.js","ab_testing/api/session.js","ab_testing/library/mapVariations.js","ab_testing/library/setRandomVariation.js","ab_testing/library/showVariation.js","ab_testing/index.js","index.js"],"names":["Analytics","instance","Object","freeze","variation","track","metric","console","log","pathname","analyticsClient","CONSTANTS","Variation","Control","Test","Performed","Session","page","sessionStorage","setItem","_getPathKey","getItem","value","path","sessionClient","mapVariations","variationNodes","document","querySelectorAll","forEach","node","style","display","dataset","addEventListener","e","preventDefault","stopPropagation","getMetricPerformed","setMetricPerformed","trackEvent","control","push","test","warn","setRandomVariation","keys","Math","floor","random","length","setVariation","showVariation","getVariation","mountAbTesting","getPageView","window","location","setPageView","trackPageview"],"mappings":";;;AAqBA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EArBMA,IAAAA,EAAAA,WACU,SAAA,IAERA,GAFQ,EAAA,KAAA,GAERA,EAAUC,oBAAoBD,EACzBA,OAAAA,EAAUC,SAEnBC,OAAOC,OAAO,MACdH,EAAUC,SAAW,KAczB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAXE,MAAA,SAAWG,EAAWC,EAAOC,GAC3BC,QAAQC,IAC8BJ,uCAAAA,OAAAA,EAAqBC,aAAAA,OAAAA,EAAkBC,cAAAA,OAAAA,MASjF,CAAA,IAAA,gBALE,MAAA,SAAcG,GACZF,QAAQC,IAAgCC,+BAAAA,OAAAA,QAI5C,EArBMT,GAqBAU,EAAkB,IAAIV,EAA5B,QAAA,gBAAA;;ACrBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,IAAMW,EAAY,CAChBC,UAAW,YACXC,QAAS,UACTC,KAAM,OACNC,UAAW,aAJb,QAAA,UAAA;;ACuCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAvCA,IAAA,EAAA,QAAA,gBAuCA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EArCMC,IAAAA,EAAAA,WACU,SAAA,IAERA,GAFQ,EAAA,KAAA,GAERA,EAAQf,oBAAoBe,EACvBA,OAAAA,EAAQf,SAEjBC,OAAOC,OAAO,MACda,EAAQf,SAAW,KA8BvB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cA5BE,MAAA,SAAYgB,GACVC,eAAeC,QAAQ,KAAKC,YAAYH,GAAON,EAAUI,UAAAA,aA2B7D,CAAA,IAAA,cAxBE,MAAA,SAAYE,GACHC,OAAAA,eAAeG,QAAQ,KAAKD,YAAYH,MAuBnD,CAAA,IAAA,eApBE,MAAA,SAAaK,GACXJ,eAAeC,QAAQR,EAAUC,UAAAA,UAAWU,KAmBhD,CAAA,IAAA,eAhBE,MAAA,WACSJ,OAAAA,eAAeG,QAAQV,EAAUC,UAAAA,aAe5C,CAAA,IAAA,qBAZE,MAAA,SAAmBN,GACjBY,eAAeC,QAAQb,EAAQK,EAAUI,UAAAA,aAW7C,CAAA,IAAA,qBARE,MAAA,SAAmBT,GACVY,OAAAA,eAAeG,QAAQf,KAOlC,CAAA,IAAA,cAJE,MAAA,SAAYiB,GACaA,MAAAA,gBAAAA,OAAAA,OAG3B,EArCMP,GAqCAQ,EAAgB,IAAIR,EAA1B,QAAA,cAAA;;ACJC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAnCD,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,kBACA,EAAA,QAAA,gBAEO,SAASS,EAAcC,GAC5BC,SAASC,iBAAiB,oBAAoBC,QAAQ,SAACC,GACrDA,EAAKC,MAAMC,QAAU,OAEgBF,IAAAA,EAAAA,EAAKG,QAAlC7B,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,YAEL,IAAVD,GACTyB,EAAKI,iBAAiB7B,EAAO,SAAC8B,GAC5BA,EAAEC,iBACFD,EAAEE,kBACEb,EAAcc,cAAAA,mBAAmBhC,KAAYK,EAAUI,UAAAA,WAM7CwB,EAAAA,cAAAA,mBAAmBjC,GACjBkC,EAAAA,gBAAAA,WAAWpC,EAAWC,EAAOC,IAN3CC,QAAQC,IACsBF,+BAAAA,OAAAA,EAD9B,uDAUFF,IAAcO,EAAUE,UAAAA,QAC1Ba,EAAee,QAAQC,KAAKZ,GACnB1B,IAAcO,EAAUG,UAAAA,KACjCY,EAAeiB,KAAKD,KAAKZ,GAEzBvB,QAAQqC,KAC4CjC,qDAAAA,OAAAA,EAAUE,UAAAA,QAAiBF,WAAAA,OAAAA,EAAUG,UAAAA,KAAsCV,mCAAAA,OAAAA,EAD/H;;ACvBL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,EAPD,IAAA,EAAA,QAAA,kBAEO,SAASyC,EAAmBnB,GAC3BoB,IAAAA,EAAO5C,OAAO4C,KAAKpB,GACnBtB,EAAY0C,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,SAEzCC,EAAAA,cAAAA,aAAa/C;;ACA5B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAND,IAAA,EAAA,QAAA,kBAEO,SAASgD,EAAc1B,GAC5BA,EAAeF,EAAc6B,cAAAA,gBAAgBxB,QAAQ,SAACC,GACpDA,EAAKC,MAAMC,QAAU;;AC6BxB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAjCD,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,iBACA,EAAA,QAAA,eACA,EAAA,QAAA,2BACA,EAAA,QAAA,gCACA,EAAA,QAAA,2BAEO,SAASsB,IAEZ9B,EAAc+B,cAAAA,YAAYC,OAAOC,SAAShD,YAAcE,EAAUI,UAAAA,WAEpD2C,EAAAA,cAAAA,YAAYF,OAAOC,SAAShD,UAC1BkD,EAAAA,gBAAAA,cAAcH,OAAOC,SAAShD,WAE9CF,QAAQC,IACcgD,uBAAAA,OAAAA,OAAOC,SAAShD,SADtC,oDAKIiB,IAAAA,EAAiB,CACrBe,QAAS,GACTE,KAAM,KAGMjB,EAAAA,EAAAA,eAAAA,GAEuB,OAAjCF,EAAc6B,cAAAA,iBACG3B,EAAAA,EAAAA,oBAAAA,IAGPA,EAAAA,EAAAA,eAAAA,GAEdnB,QAAQC,IAAsCgB,qCAAAA,OAAAA,EAAc6B,cAAAA;;AC7B9D,aAHA,QAAA,iBACA,IAAA,EAAA,QAAA,iBAEA,EAAA,EAAA","file":"src.315f9acf.js","sourceRoot":"../src","sourcesContent":["class Analytics {\n  constructor() {\n    // Singleton\n    if (Analytics.instance instanceof Analytics) {\n      return Analytics.instance;\n    }\n    Object.freeze(this);\n    Analytics.instance = this;\n  }\n\n  trackEvent(variation, track, metric) {\n    console.log(\n      `--> DEBUG: TrackEvent Variation: ${variation}, Track: ${track}, Metric: ${metric}`\n    );\n  }\n\n  trackPageview(pathname) {\n    console.log(`--> DEBUG: Pageview URL: ${pathname}`);\n  }\n}\n\nconst analyticsClient = new Analytics();\n\nexport { analyticsClient };\n","const CONSTANTS = {\n  Variation: 'variation',\n  Control: 'control',\n  Test: 'test',\n  Performed: 'performed',\n};\n\nexport { CONSTANTS };\n","import { CONSTANTS } from '../constants';\n\nclass Session {\n  constructor() {\n    // Singleton\n    if (Session.instance instanceof Session) {\n      return Session.instance;\n    }\n    Object.freeze(this);\n    Session.instance = this;\n  }\n  setPageView(page) {\n    sessionStorage.setItem(this._getPathKey(page), CONSTANTS.Performed);\n  }\n\n  getPageView(page) {\n    return sessionStorage.getItem(this._getPathKey(page));\n  }\n\n  setVariation(value) {\n    sessionStorage.setItem(CONSTANTS.Variation, value);\n  }\n\n  getVariation() {\n    return sessionStorage.getItem(CONSTANTS.Variation);\n  }\n\n  setMetricPerformed(metric) {\n    sessionStorage.setItem(metric, CONSTANTS.Performed);\n  }\n\n  getMetricPerformed(metric) {\n    return sessionStorage.getItem(metric);\n  }\n\n  _getPathKey(path) {\n    return `visited-path-${path}`;\n  }\n}\nconst sessionClient = new Session();\n\nexport { sessionClient };\n","import { analyticsClient } from '../api/analytics';\nimport { sessionClient } from '../api/session';\nimport { CONSTANTS } from '../constants';\n\nexport function mapVariations(variationNodes) {\n  document.querySelectorAll('[data-variation]').forEach((node) => {\n    node.style.display = 'none';\n\n    const { variation, track, metric } = node.dataset;\n\n    if (typeof track !== 'undefined') {\n      node.addEventListener(track, (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (sessionClient.getMetricPerformed(metric) === CONSTANTS.Performed) {\n          console.log(\n            `--> DEBUG: TRACK:Metric \"${metric}\" already performed by user during this session.`\n          );\n          return;\n        }\n        sessionClient.setMetricPerformed(metric);\n        analyticsClient.trackEvent(variation, track, metric);\n      });\n    }\n\n    if (variation === CONSTANTS.Control) {\n      variationNodes.control.push(node);\n    } else if (variation === CONSTANTS.Test) {\n      variationNodes.test.push(node);\n    } else {\n      console.warn(\n        `--> WARNING: Unsupported variation type, only \"${CONSTANTS.Control}\" and \"${CONSTANTS.Test}\" types are allowed but found \"${variation}\"`\n      );\n    }\n  });\n}\n","import { sessionClient } from '../api/session';\n\nexport function setRandomVariation(variationNodes) {\n  const keys = Object.keys(variationNodes);\n  const variation = keys[Math.floor(Math.random() * keys.length)];\n\n  sessionClient.setVariation(variation);\n}\n","import { sessionClient } from '../api/session';\n\nexport function showVariation(variationNodes) {\n  variationNodes[sessionClient.getVariation()].forEach((node) => {\n    node.style.display = null;\n  });\n}\n","import { analyticsClient } from './api/analytics';\nimport { sessionClient } from './api/session';\nimport { CONSTANTS } from './constants';\nimport { mapVariations } from './library/mapVariations';\nimport { setRandomVariation } from './library/setRandomVariation';\nimport { showVariation } from './library/showVariation';\n\nexport function mountAbTesting() {\n  if (\n    sessionClient.getPageView(window.location.pathname) !== CONSTANTS.Performed\n  ) {\n    sessionClient.setPageView(window.location.pathname);\n    analyticsClient.trackPageview(window.location.pathname);\n  } else {\n    console.log(\n      `--> DEBUG: TRACK:${window.location.pathname} already performed by user during this session.`\n    );\n  }\n\n  const variationNodes = {\n    control: [],\n    test: [],\n  };\n\n  mapVariations(variationNodes);\n\n  if (sessionClient.getVariation() === null) {\n    setRandomVariation(variationNodes);\n  }\n\n  showVariation(variationNodes);\n\n  console.log(`--> DEBUG: Variation selected: ${sessionClient.getVariation()}`);\n}\n","import './styles.scss';\nimport { mountAbTesting } from './ab_testing';\n\nmountAbTesting();\n"]}