{"version":3,"sources":["ab_testing/api/analytics.js","ab_testing/constants.js","ab_testing/api/storage.js","ab_testing/library/mapVariations.js","ab_testing/library/setRandomVariation.js","ab_testing/library/showVariation.js","ab_testing/index.js","index.js"],"names":["Analytics","instance","Object","freeze","node","dataset","variation","track","metric","test","console","log","pathname","analyticsClient","CONSTANTS","Variation","Control","Test","Performed","Storage","page","localStorage","setItem","_getPathKey","getItem","path","storageClient","mapVariations","variationNodes","document","querySelectorAll","forEach","style","display","addEventListener","e","preventDefault","stopPropagation","getMetricPerformed","setMetricPerformed","trackEvent","control","push","setRandomVariation","keys","weight","nodeVariation","hasWeight","getVariation","rollResult","Math","random","getWeightRoll","getDefaultRoll","setVariation","showVariation","variationForNode","mountAbTesting","getPageView","window","location","setPageView","trackPageview"],"mappings":"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","file":"src.a9cce403.js","sourceRoot":"../src","sourcesContent":["class Analytics {\n  constructor() {\n    // Singleton\n    if (Analytics.instance instanceof Analytics) {\n      return Analytics.instance;\n    }\n    Object.freeze(this);\n    Analytics.instance = this;\n  }\n\n  trackEvent(node) {\n    const { variation, track, metric, test } = node.dataset;\n    console.log(\n      `--> DEBUG: TrackEvent Variation: ${variation}, Track: ${track}, Metric: ${metric}, Test: ${test}`\n    );\n  }\n\n  trackPageview(pathname) {\n    console.log(`--> DEBUG: Pageview URL: ${pathname}`);\n  }\n}\n\nconst analyticsClient = new Analytics();\n\nexport { analyticsClient };\n","const CONSTANTS = {\n  Variation: 'variation',\n  Control: 'control',\n  Test: 'test',\n  Performed: 'performed',\n};\n\nexport { CONSTANTS };\n","import { CONSTANTS } from '../constants';\n\nclass Storage {\n  constructor() {\n    // Singleton\n    if (Storage.instance instanceof Storage) {\n      return Storage.instance;\n    }\n    Object.freeze(this);\n    Storage.instance = this;\n  }\n  setPageView(page) {\n    localStorage.setItem(this._getPathKey(page), CONSTANTS.Performed);\n  }\n\n  getPageView(page) {\n    return localStorage.getItem(this._getPathKey(page));\n  }\n\n  setVariation(test, variation) {\n    localStorage.setItem(test, variation);\n  }\n  getVariation(test) {\n    return localStorage.getItem(test);\n  }\n\n  setMetricPerformed(metric) {\n    localStorage.setItem(metric, CONSTANTS.Performed);\n  }\n\n  getMetricPerformed(metric) {\n    return localStorage.getItem(metric);\n  }\n\n  _getPathKey(path) {\n    return `visited-path-${path}`;\n  }\n}\nconst storageClient = new Storage();\n\nexport { storageClient };\n","import { analyticsClient } from '../api/analytics';\nimport { storageClient } from '../api/storage';\nimport { CONSTANTS } from '../constants';\n\nexport function mapVariations(variationNodes) {\n  document.querySelectorAll('[data-test]').forEach((node) => {\n    node.style.display = 'none';\n\n    const { variation, track, metric, test } = node.dataset;\n\n    if (typeof track !== 'undefined') {\n      node.addEventListener(track, (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (storageClient.getMetricPerformed(metric) === CONSTANTS.Performed) {\n          console.log(\n            `--> DEBUG: TRACK:Metric \"${metric}\" already performed by user during this session.`\n          );\n          return;\n        }\n        storageClient.setMetricPerformed(metric);\n        analyticsClient.trackEvent(node);\n      });\n    }\n\n    if (typeof variationNodes[test] === 'undefined') {\n      variationNodes[test] = {\n        control: [],\n        test: [],\n      };\n    }\n    variationNodes[test][variation].push(node);\n  });\n}\n","import { storageClient } from '../api/storage';\nimport { CONSTANTS } from '../constants';\n\nexport function setRandomVariation(variationNodes) {\n  const tests = Object.keys(variationNodes);\n\n  tests.forEach((test) => {\n    variationNodes[test].control.forEach((node) => {\n      const { weight, variation: nodeVariation, test } = node.dataset;\n\n      let variation;\n      const hasWeight = typeof weight !== 'undefined';\n\n      if (storageClient.getVariation(test) !== null) {\n        return;\n      }\n\n      const rollResult = Math.random() * 100;\n\n      variation = hasWeight\n        ? getWeightRoll(rollResult, weight, nodeVariation)\n        : getDefaultRoll(rollResult);\n\n      storageClient.setVariation(test, variation);\n      console.log(\n        `--> DEBUG: Variation selected: Test: ${test}, Variation: ${variation}`\n      );\n    });\n  });\n}\n\nfunction getWeightRoll(rollResult, weight, nodeVariation) {\n  let variation = nodeVariation;\n  if (rollResult > weight) {\n    variation =\n      nodeVariation === CONSTANTS.Test ? CONSTANTS.Control : CONSTANTS.Test;\n  }\n\n  return variation;\n}\n\nfunction getDefaultRoll(rollResult) {\n  return rollResult > 50 ? CONSTANTS.Control : CONSTANTS.Test;\n}\n","import { storageClient } from '../api/storage';\n\nexport function showVariation(variationNodes) {\n  const tests = Object.keys(variationNodes);\n\n  tests.forEach((test) => {\n    const variationForNode = storageClient.getVariation(test);\n\n    variationNodes[test][variationForNode].forEach((node) => {\n      node.style.display = null;\n    });\n  });\n}\n","import { analyticsClient } from './api/analytics';\nimport { storageClient } from './api/storage';\nimport { CONSTANTS } from './constants';\nimport { mapVariations } from './library/mapVariations';\nimport { setRandomVariation } from './library/setRandomVariation';\nimport { showVariation } from './library/showVariation';\n\nexport function mountAbTesting() {\n  if (\n    storageClient.getPageView(window.location.pathname) !== CONSTANTS.Performed\n  ) {\n    storageClient.setPageView(window.location.pathname);\n    analyticsClient.trackPageview(window.location.pathname);\n  } else {\n    console.log(\n      `--> DEBUG: TRACK:${window.location.pathname} already performed by user during this session.`\n    );\n  }\n\n  const variationNodes = {};\n  mapVariations(variationNodes);\n  setRandomVariation(variationNodes);\n  showVariation(variationNodes);\n}\n","import './styles.scss';\nimport { mountAbTesting } from './ab_testing';\n\nmountAbTesting();\n"]}